
#webbrowser.open(googleSearchQuery(s))
#pprint(read(glf()))
#pprint(gitNames(pydir))
#logger(action='test', c='ddddddddddd', e='gggg', f=1, h=alist)
#pprint(mclean('/home/kdog3682/PYTHON/utils.js'))
#mclean('/home/kdog3682/2023/utils.js')
#appendVariable(absdir(colordistdir))
#parseTime('4:57PM')
#dategetter('4:32pm')
#pprint(datestamp())
#createdir(colordir, ff(dldir, after='4:55PM'), mode='move')
#pprint(gitNames(dir=pydir))
#pprint(ff(txtdir, name='hash'))
#pprint(glf(budir))
#moveClipToLogJson(key='gradeRef')
#s = linegetter(SystemCommand('git ls-tree --full-tree --name-only -r HEAD').success)
#pprint(s)
#ff(name='test')
#pprint(changeFileName(npath(dldir, 'test.pdf'), lambda x: 'foo' + x))
#print(snapshotOfDirectory())
#pprint(findFile('Student Grade Reports.pdf'))
#pprint(isfile('data-parsers.js'))
#ffWrapper('name=dep')
#t = datetime.now()
#pprint(t.isoweekday())
#ff(dir=pydir, text='^\d+\.\d+.*?\n\d+\.\d+', flags=re.M | re.I)
#printdir(dir2023)
#pprint(trashdir)
#ff(listdir(trashdir), py=1)
#strife = "%A %B %d, %-I:%M:%S%p"
#t = mdate(pydir + 'base.py')
#pprint(t)
#pprint(timestamp())
#pprint(toSeconds(hours=10))
#n = timestamp()
#pprint(datetime.fromtimestamp(timestamp()).strftime('%c'))
#n =  timestamp() - toSeconds(hours=168)
#pprint(datetime.fromtimestamp(n).strftime(strife))
#pprint(isRecent(dldir + 'practice-test-math-grade-4.pdf', hours=1000))
#ff(dldir, pdf=1, weeks=8, mode='info')
#print(shellescape('/home/k/~asd'))
#SystemCommand('node App.js pdfIni', s)
#pprint(getYearNumber())
#print(map(choose2([{'subject': 1}], anti=1), lambda x: deleteKey(x, 'subject')))
#getLoggerData(key='gitpush')
#SystemCommand('''
#pip install pillow
#pip install pytesseract
#''')
#pprint(npath(dldir, '/home/kdog3682/PYTHON/base.py'))
#pprint(hasKey('asdf', 'a'))
#printdir(pdfdir)
#store = Partitioner2(os.listdir(dldir))()
#pprint(store)
#ff(dir2023, js=1, mode='info', text='worddict', flags=re.I)
#todo vueData textEdit advanced htmlBuilder
#ff(pubdir, js=1, name='comp', mode='open')
#seeClipKeys()
#Each item ... has to look a certain way.
#When you serve those whom you have a connection to, it feels different.
#All of you are smart!
#There are not really any complaints.
#For the most part, playing by the rules.
#mkdir(dldir + 'PDFS')
#s = findFile('test.pdf')
#ofile(s)
#pprint(dollarPrompt('hi $1\n\nfooo()'))
#printdir(nodedir2023)
#ofile(nodedir2023 + 'pdfjs-dist/web/pdf_viewer.js')
#ofile('/home/kdog3682/2023/pdfjs/web/viewer.html')
#ofile('/home/kdog3682/2023/pdfjs/web/viewer.js')
#printdir(pubdir)
#sosdf()
#chdir(pubdir)
#ofile('sj.js')
#ofile([el + '.js' for el in x])
#printdir(mathdir)
#pprint(saveMathFileByFolder('quiz'))
#pprint(find_file('-5'))
#pprint(upcomingDate('saturday', next=2))
#ff(mathdir, recursive=1, mode='tree')
#pprint(promptRenameFile('asdf/asdf/a.js'))
#pprint(printDirRecursive(mathdir))
#printdir(sandir)
#ff(fontdir)
#copydir(getMathDir(), sandir)
#printdir(sandir)
#printdir(dir2023)
#pprint(upcomingDate('saturday'))
#mfiles(absdir(usbdrivedir), mkdir(os.path.join(usbdrivedir, key)))
#printdir(usbdrivedir)
#cfile('ec.js', usbdrivedir)
#usb('test.pdf as Q')
#printdir(getMathDir(-1))
#appendVariable(choose(sort(ff(dldir, days=12, pdf=1), lambda x: tail(x))))
#printdir(jchdir)
#ofile(jchdir + 'components.js')
#writeFiles('a', 'b')
#swapFiles('a', 'b')
#swapFiles('test', 'dialogue')
#mkdir(localbackupdir)
#printdir(localbackupdir)
#appendVariable(ff(dir2023, hours=1))
#pprint(isRecentFile('base.py', after='1:00AM', days=0))
#usb(temp)
#ff(dir2023, mode='date', js=1)
#git clone https://github.com/firebase/codelab-friendlychat-web
#SystemCommand('npm install -g firebase-tools')
#mkdir(publicfirebasedir)
#mkfile(hammyfirebasehtml, samplehtml, hammyfirebase)
#ff(html=1)
#ofile('http://localhost:8000')
#printdir(nodedir2023 + 'nerdamer/')
#ofile(nodedir2023 + 'nerdamer/index.html')
#usb(ff(js=1, hours=3))
#ofile(findFile('emojis.json'))
#printdir(publishdir)
#openFirstFile(publishdir)
#ff(js=1, days=5, text='./generateMultipleChoice')
#addfiles()
#ff(localbackupdir)
#cfile('clip.js', 'quiz.txt')
#addTitles()
#print(len(split(clip(), 'linebreak')))
#pprint(len(clip()))
#ff(js=1, name='cypher')
#ff(dir=pubdir, js=1, name='vue', mode='open')
#assert(print(sayhi('hi')))
#pprint(datestamp())
#printdir(get_usb_dir() + '/2023')
#pprint(ff(days=15, js=1, text='downloadpdf', once=1, flags=re.I, ignoreRE='hammyco|server|browser'))
#ff(mode='save', html=1)
#map(temp, rfile)
#usb(ff(pydir, days=3))
#ff(jsondir, mode='open', name='css')
#file:///media/fuse/crostini_25bd1ae3ef71bac8d459747ce670faa67d509f14_termina_penguin/JSONS/css.abrevs.json
#s =
#ofile('gpt.json')
#olf()
# Give lots of details.
#cleandir(pydir)
#print([][-1])
#print(datestamp(1680614730.0, 'praw'))
#pprint(map(read('reddit.json').get('unstable_diffusion').get(datestamp()), lambda x: datestamp(x.get('timestamp'), 'praw')))
#aobj = {'a': 1}
#pprint(list(aobj))
#save(olddirs=ff(rootdir, contains='py'))
#save(pyfiles=ff(rootdir, py=1))
#a  =  {'created_utc': stamp}
#pprint(datestamp(a))
#print(filter([None]))
#pprint(timestamp())
#printdir(nodedir + 'chroma-js')
#cfile(findFile('chroma.min.js'), dir2023)
#cfile(glf(), dir2023)
#map(vimfiles, saveToDrive)
#print(map([{'a':1}], 'a'))
#s = read(drivedir + 'allGoogleDocs.json')
#items = googleDocsJson(debug=1)
#items = obj_filter(items, title='\bcover\b|resume', owner='kevin', delete=False, get='id date title')
#appendVariable(items)
#makeNodePDF(temp)
#writejs(sub(sub(join(filter(read(glf()), '\n')), ';', ''), '(?: +|\n+)// .+', ''))
# /home/kdog3682/2023/routers.pdfgen.js
# /home/kdog3682/2023/routers.pdfgen.js
#vimFiles = ['/home/kdog3682/.vimrc', '/home/kdog3682/VIM/functions.vim', '/home/kdog3682/VIM/variables.vim']
#save = absdir(examdir) + ff(jsondir, days=10) + ff(txtdir, days=10) + ff(dir2023, files=1) + ff(pydir, days=10) + vimFiles
# also have an append.vim
#usbz(save)
#rename_file()
#mlf()
#file = '
#SystemCommand(f"git log --pretty=format:%h --author-date-order --diff-filter=A --follow {file} | tail -1 > commit.txt")
#SystemCommand('git add git.js')
#pprint(parseDiff())
#mwrite('temp.py', 'comments.py', regex = '^# *.+')

# 04-29-2023 


#printdir(pipdir + '_internal/')
#write('dl.html', request('https://garden.bradwoods.io/notes/css/blend-modes'))
#ff(resourcedir, text='grocery', flags=re.I, mode='open')
#file = '/home/kdog3682/Resources2023/changelog.md'
#print(fn(file))
#pprint(filePrompt(dir=dldir))
#pprint(choose([1,2,3]))
#store = Partitioner2(os.listdir(dldir))()
#pprint(store)
#clip(fa('https://cdnjs.com/libraries/codemirror', r=r, filter=f))
#clip(linegetter(join(clip()), filter=f))
#copy_dir_to_dir('codemirror.js')
#file:///media/fuse/crostini_25bd1ae3ef71bac8d459747ce670faa67d509f14_termina_penguin/CM/codemirror-component.jsa
#pprint(find(['a',2,3], 1))
#write('temp.txt.js', first(read('repo.temp.json')))
#logfile(Partitioner2(ff(cmdir, js=1, lib=0))())
#pprint(map([None, None, 1], lambda x: x))
#SystemCommand('npm i @codemirror/state')
#SystemCommand('npm i @codemirror/view')
#SystemCommand('npm i @codemirror/language')
#SystemCommand('npm i @codemirror/lang-javascript')
#SystemCommand('npm i @codemirror/commands')
#SystemCommand('npm i @codemirror/theme-one-dark')
#printdir(nodedir2023 + 'commands')
#getdir(dldir)
#node_dir_search('markdown')
#SystemCommand('npm i rollup @rollup/plugin-node-resolve --save-dev')
#SystemCommand('npm i @codemirror/basic-setup @lezer/highlight')
#SystemCommand('lezer-generator yaml.grammar -o lang.js')
#map(linegetter(s), lambda x: cfile(x, dir2023 + tail(x)))
#npm(str1682629691)
//var mathRE = /(\(?(?:d+\.)\w+(?:\^(?:d+\.)\w+)?\)?\/\(?(?:d+\.)\w+(?:\^(?:d+\.)\w+)?\)?|\(?(?:d+\.)\w+(?:\^(?:d+\.)\w+)?\)?(?:\/\(?(?:d+\.)\w+(?:\^(?:d+\.)\w+)?\)?)? *(?:(?:[+*=-] *|div +)\(?(?:d+\.)\w+(?:\^(?:d+\.)\w+)?\)?(?:\/\(?(?:d+\.)\w+(?:\^(?:d+\.)\w+)?\)?)?)+)/g
#clip(join(fa('parse.js', r, map=lambda k,v: k + ' = ' + v + '')))
#ffstring('js c')
#SystemCommand('git check-ignore -v lang.terms.js')
#SystemCommand('git rm --cached /home/kdog3682/2023/')

# 04-30-2023 

#pprint(smartManager())
#Samantha walks a total of 2/3 miles to and from school every day. Finish the text for this math question. Create 4 possible answer choices. Only one of them should be correct. Output the results in a json containing keys: "problem", "choices", "answer."
#opener(chatgptPrompts)
#pprint(smartManager())
#pprint(runChatgpt())
#masterFileInfo()
#pprint(len(map(filter(read('2023.directory.json'), lambda x: x.get('extension')=='js'), lambda x: x.get('name'))))
# The file is reverted from 
#smartManager()
#runChatgpt("""
#Explain what the function below does:
#def copyToBrowser(s):
#""")
#printdir()
#pprint(surmonChinese())
#block_to_browser('hi\nbye', mode='email')
#appscript('emailLastDocToSelf')
#print(appscript('hi', 'a\nb', [1]))
#pprint("appscript('emailLastDocToSelf')", 1072)
#email(read('changelog.md'))
#cfile(budir + 'class.js11-08-2022', dir2023 + 'class.js')
#untouched 1080
#pushAll()

